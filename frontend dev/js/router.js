const urlPageTitle = "–°–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤";

const urlRoutes = {
    404: { template: "/pages/404.html", title: "404 | " + urlPageTitle, script: null },
    "/": { template: "/pages/main.html", title: "–ì–ª–∞–≤–Ω–∞—è | " + urlPageTitle, script: null },
    "/login": { template: "/pages/login.html", title: "–í—Ö–æ–¥ | " + urlPageTitle, script: "js/login.js" },
    "/registration": { template: "/pages/registration.html", title: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è | " + urlPageTitle, script: "js/registration.js" },
    "/absences": { template: "/pages/absences.html", title: "–ú–æ–∏ –ø—Ä–æ–ø—É—Å–∫–∏ | " + urlPageTitle, script: "js/absences.js" }
};

const route = (event) => {
    event = event || window.event;
    event.preventDefault();
    window.history.pushState({}, "", event.target.href);
    locationHandler();
};

const checkTokenValidity = async () => {
    const token = localStorage.getItem('token');
    if (!token) return false;

    try {
        console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...");
        const response = await fetch('http://localhost:5000/api/Auth/profile', {
            method: 'GET',
            headers: { 'Authorization': `Bearer ${token}` }
        });

        if (!response.ok) {
            console.warn("–°–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª —Ç–æ–∫–µ–Ω. –£–¥–∞–ª—è–µ–º –µ–≥–æ...");
            localStorage.removeItem('token');
            return false;
        }

        return true;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞:", error);
        localStorage.removeItem('token');
        return false;
    }
};

const loadScript = (scriptPath) => {
    return new Promise((resolve, reject) => {
        document.querySelectorAll("script[data-dynamic]").forEach(script => script.remove());

        if (scriptPath) {
            const script = document.createElement("script");
            script.src = scriptPath;
            script.setAttribute("data-dynamic", "true");

            script.onload = () => {
                console.log(`–°–∫—Ä–∏–ø—Ç ${scriptPath} –∑–∞–≥—Ä—É–∂–µ–Ω`);
                resolve();
            };
            script.onerror = () => {
                console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${scriptPath}`);
                reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${scriptPath}`));
            };
            document.body.appendChild(script);
        }
    });
};

function parseJwt(token) {
    try {
        if (!token) return null;

        const base64Url = token.split('.')[1];
        if (!base64Url) throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞");
        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
        const jsonPayload = decodeURIComponent(atob(base64).split('').map(c =>
            '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)
        ).join(''));

        return JSON.parse(jsonPayload);
    } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JWT:", e);
        return null;
    }
}

const isAuthenticated = () => {
    return checkTokenValidity();
};

const updateHeader = () => {
    const header = document.getElementById('header');
    const currentPath = window.location.pathname;
    const token = localStorage.getItem('token');
    const user = token ? parseJwt(token) : null;
    const absencesMatch = currentPath.match(/^\/absences\/(.+)$/);
    const studentMatch = currentPath.match(/^\/student\/(.+)$/);
    if (token && !user) {
        localStorage.removeItem('token');
    }

    if (user && isAuthenticated()) {
        if(absencesMatch){
            header.innerHTML = `
            <a href="/">–°–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤</a>
            <nav>
                <a href="/student/${encodeURIComponent(user.email)}">–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</a>
                <a href="/" id="logout">–í—ã—Ö–æ–¥</a>
            </nav>
            `;
        } else if(studentMatch){
            header.innerHTML = `
            <a href="/">–°–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤</a>
            <nav>
                <a href="/absences/${encodeURIComponent(user.email)}">–ú–æ–∏ –ø—Ä–æ–ø—É—Å–∫–∏</a>
                <a href="/" id="logout">–í—ã—Ö–æ–¥</a>
            </nav>
            `;
        } else {
            header.innerHTML = `
            <a href="/">–°–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤</a>
            <nav>
                <a href="/student/${encodeURIComponent(user.email)}">–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</a>
                <a href="/absences/${encodeURIComponent(user.email)}">–ú–æ–∏ –ø—Ä–æ–ø—É—Å–∫–∏</a>
                <a href="/" id="logout">–í—ã—Ö–æ–¥</a>
            </nav>
            `;
        }
        ;
        document.getElementById('logout').addEventListener('click', () => {
            localStorage.removeItem('token');
            window.location.href = "/";
        });
    } else {
        let navLinks = '';
        if (currentPath === "/login") {
            navLinks = '<a href="/registration">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</a>';
        } else if (currentPath === "/registration") {
            navLinks = '<a href="/login">–í—Ö–æ–¥</a>';
        } else {
            navLinks = `
                <a href="/registration">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</a>
                <a href="/login">–í—Ö–æ–¥</a>
            `;
        }
        header.innerHTML = `
            <a href="/">–°–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤</a>
            <nav>${navLinks}</nav>
        `;
    }
};

const locationHandler = async () => {
    let location = window.location.pathname;
    if (location.length === 0) location = "/";

    const token = localStorage.getItem('token');
    const user = token ? parseJwt(token) : null;

    if (!user && !(await isAuthenticated()) && location !== "/login" && location !== "/registration" && location !== "/") {
        console.warn("–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ /login...");
        localStorage.removeItem('token');
        window.location.href = "/login";
        return;
    }
    
    const studentMatch = location.match(/^\/student\/(.+)$/);
    if (studentMatch) {
        const studentEmail = decodeURIComponent(studentMatch[1]);
        console.log("Email —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ URL:", studentEmail);

        const html = await fetch("/pages/student.html").then(res => res.text());
        document.getElementById("content").innerHTML = html;
        document.title = "–°—Ç—É–¥–µ–Ω—Ç | " + urlPageTitle;
        try {
            await loadScript("js/student.js");
            console.log("–°–∫—Ä–∏–ø—Ç student.js –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏.");
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∫—Ä–∏–ø—Ç–∞ student.js:", error);
        }
        updateHeader();
        return;
    }
    
    const absencesMatch = location.match(/^\/absences\/(.+)$/);
    if (absencesMatch) {
        const studentEmail = decodeURIComponent(absencesMatch[1]);
        console.log("üìß Email —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ URL:", studentEmail);

        const html = await fetch("/pages/absences.html").then(res => res.text());
        document.getElementById("content").innerHTML = html;
        document.title = "–ú–æ–∏ –ø—Ä–æ–ø—É—Å–∫–∏ | " + urlPageTitle;

        try {
            await loadScript("js/absences.js");
            console.log("–°–∫—Ä–∏–ø—Ç absences.js –∑–∞–≥—Ä—É–∂–µ–Ω.");
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ absences.js:", error);
        }

        updateHeader();
        return;
    }
    
    const route = urlRoutes[location] || urlRoutes[404];
    const html = await fetch(route.template).then(response => response.text());
    document.getElementById("content").innerHTML = html;
    document.title = route.title;
    updateHeader();
    loadScript(route.script);
};

window.onpopstate = locationHandler;
window.route = route;

locationHandler();
